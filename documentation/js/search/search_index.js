var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.251,1,1.463]],["body/modules/AppModule.html",[0,2.013,1,2.657,2,1.382,3,1.382,4,1.908,5,1.908,6,1.382,7,1.908,8,1.908,9,2.301,10,2.301,11,2.272,12,0.058,13,2.495,14,1.908,15,1.908,16,0.745,17,0.628,18,0.628,19,2.896,20,3.008,21,1.151,22,1.187,23,2.301,24,1.616,25,1.908,26,2.896,27,2.896,28,2.896,29,0.745,30,0.101,31,0.033,32,0.043,33,0.033]],["title/classes/CreateTaskDto.html",[30,0.092,34,1.075]],["body/classes/CreateTaskDto.html",[12,0.058,16,0.629,17,0.53,18,0.53,21,0.869,29,0.629,30,0.118,31,0.028,32,0.038,33,0.028,34,1.385,35,1.002,36,3.075,37,1.942,38,0.441,39,1.885,40,2.345,41,3.239,42,1.074,43,2.641,44,1.885,45,3.378,46,1.218,47,2.752,48,1.19,49,2.444,50,2.444,51,3.871,52,1.611,53,3.075,54,1.611]],["title/classes/GetTasksFilterDto.html",[30,0.092,55,1.075]],["body/classes/GetTasksFilterDto.html",[12,0.057,16,0.724,17,0.61,18,0.61,21,0.956,29,0.724,30,0.13,31,0.032,32,0.042,33,0.032,35,1.153,38,0.507,39,2.073,42,0.956,43,2.073,44,2.073,46,0.724,48,1.309,53,2.952,54,1.854,55,1.523,56,3.304,57,1.985,58,2.235,59,3.304,60,1.465,61,2.814,62,2.814,63,1.465,64,2.814,65,2.814,66,2.814,67,4.16,68,1.153,69,2.814,70,2.235,71,2.235]],["title/classes/Task.html",[30,0.092,46,0.674]],["body/classes/Task.html",[12,0.058,16,0.658,17,0.555,18,0.555,21,0.897,29,0.658,30,0.09,31,0.029,32,0.04,33,0.029,35,1.049,38,0.462,39,1.945,40,1.892,41,2.613,42,1.095,43,2.375,44,2.375,46,1.02,48,1.5,60,1.397,63,1.397,68,1.049,72,2.034,73,2.77,74,3.966,75,2.613,76,4.704,77,2.56,78,2.298,79,3.966,80,2.56,81,2.56,82,2.56,83,3.487,84,1.687]],["title/classes/TaskRepository.html",[30,0.092,85,1.251]],["body/classes/TaskRepository.html",[12,0.059,16,0.495,17,0.417,18,0.417,21,1.027,29,0.495,30,0.067,31,0.022,32,0.032,33,0.022,34,1.714,35,0.788,38,0.347,40,1.358,41,1.875,42,0.732,46,1.027,48,1.002,55,1.534,57,1.616,59,3.322,60,1.319,63,0.677,68,0.788,73,2.26,84,1.267,85,1.358,86,1.528,87,2.69,88,1.587,89,3.322,90,1.875,91,1.875,92,1.875,93,1.923,94,1.587,95,1.587,96,1.587,97,1.587,98,2.466,99,1.875,100,1.923,101,1.875,102,1.923,103,1.267,104,1.267,105,1.267,106,1.267,107,1.267,108,1.923,109,2.632,110,1.528,111,1.923,112,1.923,113,1.923,114,2.845,115,2.845,116,2.26,117,1.923,118,1.587,119,1.073,120,1.528,121,1.528,122,1.528]],["title/classes/TaskStatusValidationPipe.html",[30,0.092,123,1.463]],["body/classes/TaskStatusValidationPipe.html",[12,0.059,16,0.536,17,0.452,18,0.452,21,0.776,22,0.854,29,0.536,30,0.073,31,0.024,32,0.034,33,0.024,35,0.854,38,0.376,39,1.684,42,0.912,46,0.536,47,1.374,48,1.25,60,1.516,63,0.734,68,0.854,70,2.398,71,2.398,88,1.684,94,1.684,95,1.684,96,1.684,97,1.684,109,1.374,118,1.684,119,1.163,121,2.398,123,1.684,124,3.09,125,1.656,126,3.018,127,3.548,128,3.548,129,3.548,130,2.819,131,3.018,132,3.018,133,2.72,134,2.085,135,3.018,136,2.085,137,2.085,138,3.018,139,3.09,140,3.889,141,2.085,142,3.018,143,2.085,144,2.085,145,2.085,146,2.085,147,1.656,148,2.085,149,1.374,150,1.656,151,1.656,152,2.085,153,3.018,154,2.085,155,1.656]],["title/controllers/TasksController.html",[156,1.463,157,1.463]],["body/controllers/TasksController.html",[12,0.059,16,0.335,17,0.283,18,0.283,21,1.005,22,0.534,29,0.335,30,0.046,31,0.015,32,0.024,33,0.015,34,1.463,38,0.235,40,1.977,42,0.858,44,1.861,46,0.782,48,1.175,52,0.859,55,1.246,57,1.977,60,1.175,63,1.071,68,0.534,75,2.575,78,2.659,88,1.175,90,1.388,91,1.745,92,0.859,94,1.861,95,1.861,96,1.861,97,1.861,98,2.731,99,0.859,101,1.388,103,0.859,104,0.859,105,0.859,106,0.859,107,0.859,110,1.036,118,1.861,123,1.175,156,0.727,157,1.175,158,1.036,159,1.036,160,1.304,161,1.673,162,1.673,163,2.104,164,1.304,165,4.144,166,1.304,167,1.304,168,1.304,169,1.036,170,1.304,171,1.304,172,4.035,173,1.304,174,1.036,175,1.304,176,2.106,177,2.106,178,1.304,179,1.304,180,1.304,181,1.036,182,1.304,183,1.304,184,1.304,185,1.304,186,1.304,187,1.304,188,3.04,189,1.304,190,2.106,191,1.304,192,1.304,193,1.086,194,1.036,195,1.304,196,1.304,197,3.568,198,3.568,199,1.304,200,1.304,201,1.304,202,1.304,203,2.106,204,1.304,205,1.304,206,1.304,207,1.304,208,1.304,209,1.304,210,1.304,211,1.304,212,1.304,213,1.304,214,1.304,215,1.304,216,1.304,217,1.304,218,1.304,219,1.304,220,1.304,221,1.304]],["title/modules/TasksModule.html",[0,1.251,11,1.251]],["body/modules/TasksModule.html",[0,1.966,2,1.318,3,1.318,4,1.82,5,1.82,6,1.318,7,2.716,8,1.82,11,2.242,12,0.058,13,2.418,14,1.82,15,1.82,16,0.71,17,0.599,18,0.599,20,2.194,21,1.176,22,1.132,23,2.194,24,1.541,29,0.71,30,0.097,31,0.031,32,0.042,33,0.031,85,1.318,157,2.299,158,2.915,193,1.926,194,2.194,222,2.194,223,2.194,224,2.762,225,2.762,226,2.194,227,2.762]],["title/injectables/TasksService.html",[193,1.075,228,1.463]],["body/injectables/TasksService.html",[12,0.059,16,0.37,17,0.312,18,0.312,21,1.004,22,0.59,24,0.803,29,0.37,30,0.05,31,0.026,32,0.026,33,0.016,34,1.437,38,0.26,42,0.959,43,0.803,46,1.004,48,1.314,55,1.319,57,0.687,60,1.314,63,1.235,68,0.59,75,2.31,78,2.748,85,1.779,88,1.271,89,3.66,90,1.502,91,1.502,92,1.502,94,2.08,95,2.08,96,2.08,97,1.956,98,2.815,99,1.502,101,0.949,103,0.949,104,0.949,105,0.949,106,0.949,107,0.949,109,2.12,116,2.247,118,1.956,119,1.271,120,1.81,122,1.144,130,1.144,147,1.81,161,1.81,162,1.81,163,1.81,169,1.81,174,1.81,181,2.247,193,0.934,226,1.144,228,1.271,229,1.439,230,1.144,231,2.279,232,1.439,233,1.439,234,1.439,235,1.439,236,1.439,237,1.439,238,1.439,239,1.439,240,1.439,241,1.439,242,1.439,243,2.829,244,1.439,245,2.279,246,2.279,247,1.439,248,1.439,249,1.439,250,1.144,251,2.279]],["title/coverage.html",[252,2.336]],["body/coverage.html",[6,1.318,12,0.057,18,0.599,25,1.82,30,0.16,31,0.031,32,0.042,33,0.031,34,1.132,36,2.194,37,2.194,42,0.71,46,0.71,55,1.132,56,2.194,57,1.318,58,2.194,60,0.973,72,2.194,85,1.318,86,2.194,119,1.541,123,1.541,124,2.194,125,2.194,156,1.541,157,1.541,159,2.194,193,1.132,228,1.541,230,2.194,250,3.917,252,1.82,253,2.762,254,2.762,255,2.762,256,2.194,257,2.762,258,3.669,259,2.194,260,2.762,261,4.121,262,2.762,263,2.762,264,2.762,265,2.762,266,2.762,267,2.762]],["title/dependencies.html",[3,1.5,268,2.207]],["body/dependencies.html",[3,1.445,12,0.059,22,1.241,24,1.69,30,0.136,31,0.034,32,0.044,33,0.034,52,1.996,54,1.996,84,1.996,139,2.406,269,3.029,270,3.029,271,4.31,272,3.029,273,3.029,274,3.898,275,3.029,276,3.029,277,3.029,278,3.029,279,3.029,280,3.029,281,3.029,282,3.029,283,3.029,284,3.029,285,3.029,286,3.029,287,3.029,288,3.029,289,3.029,290,3.029,291,3.029]],["title/miscellaneous/enumerations.html",[292,0.905,293,2.498]],["body/miscellaneous/enumerations.html",[12,0.056,31,0.04,32,0.049,33,0.04,38,0.637,63,1.512,133,3.046,149,2.828,150,3.409,151,3.409,292,1.448,293,2.806,294,3.532,295,4.291,296,3.532]],["title/miscellaneous/functions.html",[292,0.905,297,2.498]],["body/miscellaneous/functions.html",[6,2.282,12,0.051,31,0.043,32,0.051,33,0.043,38,0.69,259,3.04,292,1.569,297,3.04,298,3.827]],["title/index.html",[38,0.398,299,2.207,300,2.207]],["body/index.html",[12,0.057,17,0.539,31,0.028,32,0.039,33,0.028,40,1.186,87,1.974,149,1.638,252,1.638,301,2.485,302,2.485,303,3.417,304,2.485,305,2.485,306,2.485,307,2.485,308,2.485,309,2.485,310,3.905,311,2.485,312,2.485,313,2.485,314,4.667,315,2.485,316,2.485,317,2.485,318,4.556,319,2.485,320,2.485,321,3.417,322,2.485,323,2.485,324,2.485,325,2.485,326,3.417,327,3.417,328,2.485,329,2.485,330,2.485,331,3.417,332,3.417,333,2.485,334,2.485,335,2.485,336,2.485,337,1.974,338,2.485,339,2.485,340,2.485,341,2.485,342,2.485,343,2.485,344,2.485,345,2.485,346,2.485,347,2.485,348,2.485,349,2.485,350,2.485,351,2.485,352,2.485,353,2.485,354,2.485,355,2.485]],["title/modules.html",[2,1.691]],["body/modules.html",[1,2.094,2,1.791,11,1.791,12,0.05,31,0.043,32,0.05,33,0.043,337,3.536,356,4.452,357,4.452,358,4.452]],["title/overview.html",[359,2.816]],["body/overview.html",[0,1.531,1,2.593,2,1.531,3,1.531,4,2.114,5,2.114,6,1.531,7,2.114,8,2.114,9,2.549,10,2.549,11,2.286,12,0.053,13,2.665,14,2.114,15,2.114,31,0.036,32,0.046,33,0.036,35,1.315,155,3.212,156,1.79,193,1.815,222,2.549,223,2.549,228,1.79,359,2.549,360,3.208,361,3.208]],["title/miscellaneous/variables.html",[292,0.905,362,2.498]],["body/miscellaneous/variables.html",[12,0.056,25,2.73,31,0.038,32,0.047,33,0.038,38,0.601,42,1.065,47,2.197,133,2.197,256,2.648,292,1.367,362,2.648,363,3.334,364,3.334,365,4.506,366,3.334,367,3.334,368,3.334,369,3.334,370,3.334,371,3.334,372,3.334,373,3.334,374,3.334,375,4.142,376,3.334]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":250,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":283,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":279,"title":{},"body":{"dependencies.html":{}}}],["0.2.32",{"_index":291,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":278,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":258,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":261,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":262,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":263,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":264,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":265,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":155,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"overview.html":{}}}],["1.1.11",{"_index":270,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":360,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":285,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":290,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":275,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":361,"title":{},"body":{"overview.html":{}}}],["5432",{"_index":369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.6.6",{"_index":287,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":276,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":271,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":281,"title":{},"body":{"dependencies.html":{}}}],["allowed",{"_index":152,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["allowedstatuses",{"_index":129,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["amazing",{"_index":338,"title":{},"body":{"index.html":{}}}],["apiforbiddenresponse",{"_index":197,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiokresponse",{"_index":198,"title":{},"body":{"controllers/TasksController.html":{}}}],["apiproperty",{"_index":51,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apitags",{"_index":199,"title":{},"body":{"controllers/TasksController.html":{}}}],["apitags('tasks",{"_index":200,"title":{},"body":{"controllers/TasksController.html":{}}}],["app",{"_index":316,"title":{},"body":{"index.html":{}}}],["applications",{"_index":309,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":140,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["async",{"_index":89,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["author",{"_index":348,"title":{},"body":{"index.html":{}}}],["autoloadentities",{"_index":374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aveek",{"_index":349,"title":{},"body":{"index.html":{}}}],["await",{"_index":116,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["backers",{"_index":339,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":142,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["baseentity",{"_index":74,"title":{},"body":{"classes/Task.html":{}}}],["body",{"_index":185,"title":{},"body":{"controllers/TasksController.html":{}}}],["body('status",{"_index":220,"title":{},"body":{"controllers/TasksController.html":{}}}],["boolean",{"_index":137,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":358,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":356,"title":{},"body":{"modules.html":{}}}],["building",{"_index":304,"title":{},"body":{"index.html":{}}}],["class",{"_index":30,"title":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":35,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":222,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":223,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["column",{"_index":76,"title":{},"body":{"classes/Task.html":{}}}],["compodoc/compodoc",{"_index":269,"title":{},"body":{"dependencies.html":{}}}],["config/typeorm.config",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('metadata",{"_index":144,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["console.log('value",{"_index":143,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["const",{"_index":109,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{}}}],["constructor",{"_index":231,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(private",{"_index":202,"title":{},"body":{"controllers/TasksController.html":{}}}],["constructor(taskrepository",{"_index":232,"title":{},"body":{"injectables/TasksService.html":{}}}],["controller",{"_index":156,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('tasks",{"_index":201,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":158,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["coverage",{"_index":252,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["created",{"_index":209,"title":{},"body":{"controllers/TasksController.html":{}}}],["created.'})@apiforbiddenresponse({description",{"_index":166,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask",{"_index":90,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(@body",{"_index":211,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(createtaskdto",{"_index":92,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtaskdto",{"_index":34,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["database",{"_index":372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":44,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{}}}],["default",{"_index":47,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":48,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["delete",{"_index":186,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('/:id",{"_index":213,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('/:id')@apiokresponse({description",{"_index":170,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleted",{"_index":214,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleted.'})@apiforbiddenresponse({description",{"_index":171,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetaskbyid",{"_index":161,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetaskbyid(@param('id",{"_index":215,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetaskbyid(id",{"_index":169,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":40,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"index.html":{}}}],["development",{"_index":317,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":151,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{}}}],["dto/create",{"_index":103,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/get",{"_index":106,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["e2e",{"_index":328,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":305,"title":{},"body":{"index.html":{}}}],["entity",{"_index":83,"title":{},"body":{"classes/Task.html":{}}}],["entityrepository",{"_index":102,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(task",{"_index":108,"title":{},"body":{"classes/TaskRepository.html":{}}}],["enumerations",{"_index":293,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["export",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":274,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":73,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{}}}],["file",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["filter.dto",{"_index":107,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":58,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:11",{"_index":65,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filter.dto.ts:15",{"_index":62,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filterdto",{"_index":101,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["forbidden",{"_index":172,"title":{},"body":{"controllers/TasksController.html":{}}}],["forbidden'})@usepipes(validationpipe",{"_index":167,"title":{},"body":{"controllers/TasksController.html":{}}}],["found",{"_index":243,"title":{},"body":{"injectables/TasksService.html":{}}}],["framework",{"_index":303,"title":{},"body":{"index.html":{}}}],["function",{"_index":260,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":297,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":206,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('/:id')@apiokresponse({description",{"_index":175,"title":{},"body":{"controllers/TasksController.html":{}}}],["get()@apiokresponse({description",{"_index":179,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettaskbyid",{"_index":162,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(@param('id",{"_index":207,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettaskbyid(id",{"_index":174,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks",{"_index":91,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks(filterdto",{"_index":99,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasksfilterdto",{"_index":55,"title":{"classes/GetTasksFilterDto.html":{}},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["getting",{"_index":299,"title":{"index.html":{}},"body":{}}],["grow",{"_index":334,"title":{},"body":{"index.html":{}}}],["here",{"_index":345,"title":{},"body":{"index.html":{}}}],["host",{"_index":366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":352,"title":{},"body":{"index.html":{}}}],["id",{"_index":75,"title":{},"body":{"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["identifier",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":153,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["implements",{"_index":126,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["import",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["imports",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{}}}],["in_progress",{"_index":150,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":38,"title":{"index.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["injectable",{"_index":228,"title":{"injectables/TasksService.html":{}},"body":{"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":229,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository",{"_index":240,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(taskrepository",{"_index":241,"title":{},"body":{"injectables/TasksService.html":{}}}],["installation",{"_index":313,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":315,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":148,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isin",{"_index":66,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isin([taskstatus.open",{"_index":69,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isnotempty",{"_index":53,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{}}}],["isnotempty()@apiproperty({type",{"_index":45,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isoptional",{"_index":67,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isin(undefined",{"_index":64,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isnotempty",{"_index":61,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isstatusvalid",{"_index":131,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isstatusvalid(status",{"_index":135,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["join",{"_index":341,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["license",{"_index":355,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":332,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":139,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"dependencies.html":{}}}],["methods",{"_index":88,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["miscellaneous",{"_index":292,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":331,"title":{},"body":{"index.html":{}}}],["mode",{"_index":321,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":344,"title":{},"body":{"index.html":{}}}],["name",{"_index":95,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["nest",{"_index":310,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":354,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":272,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":273,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":52,"title":{},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["new",{"_index":119,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["node.js",{"_index":302,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":239,"title":{},"body":{"injectables/TasksService.html":{}}}],["notfoundexception(`task",{"_index":245,"title":{},"body":{"injectables/TasksService.html":{}}}],["npm",{"_index":314,"title":{},"body":{"index.html":{}}}],["number",{"_index":78,"title":{},"body":{"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["open",{"_index":149,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":96,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["out",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":359,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":268,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":187,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":219,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":94,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["parseintpipe",{"_index":188,"title":{},"body":{"controllers/TasksController.html":{}}}],["password",{"_index":371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":189,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('/:id/status",{"_index":217,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('/:id/status')@apiokresponse({description",{"_index":182,"title":{},"body":{"controllers/TasksController.html":{}}}],["pg",{"_index":280,"title":{},"body":{"dependencies.html":{}}}],["pipes/task",{"_index":195,"title":{},"body":{"controllers/TasksController.html":{}}}],["pipetransform",{"_index":127,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["please",{"_index":342,"title":{},"body":{"index.html":{}}}],["port",{"_index":368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":190,"title":{},"body":{"controllers/TasksController.html":{}}}],["post()@apiokresponse({description",{"_index":164,"title":{},"body":{"controllers/TasksController.html":{}}}],["postgres",{"_index":365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":160,"title":{},"body":{"controllers/TasksController.html":{}}}],["present",{"_index":246,"title":{},"body":{"injectables/TasksService.html":{}}}],["primarygeneratedcolumn",{"_index":79,"title":{},"body":{"classes/Task.html":{}}}],["private",{"_index":130,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{}}}],["production",{"_index":323,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":301,"title":{},"body":{"index.html":{}}}],["project",{"_index":333,"title":{},"body":{"index.html":{}}}],["promise",{"_index":98,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["properties",{"_index":39,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["query",{"_index":110,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["query(validationpipe",{"_index":204,"title":{},"body":{"controllers/TasksController.html":{}}}],["query.andwhere",{"_index":113,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.andwhere('task.status",{"_index":112,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.getmany",{"_index":117,"title":{},"body":{"classes/TaskRepository.html":{}}}],["read",{"_index":343,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":128,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["reflect",{"_index":282,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":87,"title":{},"body":{"classes/TaskRepository.html":{},"index.html":{}}}],["reset",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["result",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":249,"title":{},"body":{"injectables/TasksService.html":{}}}],["results",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":203,"title":{},"body":{"controllers/TasksController.html":{}}}],["retrieved.'})@apiforbiddenresponse({description",{"_index":177,"title":{},"body":{"controllers/TasksController.html":{}}}],["return",{"_index":118,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["returns",{"_index":97,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["rimraf",{"_index":284,"title":{},"body":{"dependencies.html":{}}}],["roy",{"_index":350,"title":{},"body":{"index.html":{}}}],["run",{"_index":318,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":286,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":306,"title":{},"body":{"index.html":{}}}],["search",{"_index":59,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{}}}],["server",{"_index":307,"title":{},"body":{"index.html":{}}}],["side",{"_index":308,"title":{},"body":{"index.html":{}}}],["source",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["specific",{"_index":176,"title":{},"body":{"controllers/TasksController.html":{}}}],["sponsors",{"_index":336,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":298,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task",{"_index":294,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../typeorm.config.ts",{"_index":363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/typeorm.config.ts",{"_index":256,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":259,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/dto/create",{"_index":36,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/dto/get",{"_index":56,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["src/tasks/pipes/task",{"_index":124,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["src/tasks/task",{"_index":296,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/tasks/task.entity.ts",{"_index":72,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/tasks/task.entity.ts:12",{"_index":82,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:15",{"_index":77,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:18",{"_index":81,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:9",{"_index":80,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.repository.ts",{"_index":86,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/tasks/task.repository.ts:11",{"_index":100,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/tasks/task.repository.ts:28",{"_index":93,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":159,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:30",{"_index":180,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:41",{"_index":178,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:49",{"_index":168,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:56",{"_index":173,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:63",{"_index":184,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":224,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":230,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:10",{"_index":233,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:16",{"_index":237,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:20",{"_index":236,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:28",{"_index":234,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:32",{"_index":235,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:40",{"_index":238,"title":{},"body":{"injectables/TasksService.html":{}}}],["start",{"_index":319,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":322,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":324,"title":{},"body":{"index.html":{}}}],["started",{"_index":300,"title":{"index.html":{}},"body":{}}],["starter",{"_index":312,"title":{},"body":{"index.html":{}}}],["statements",{"_index":255,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":60,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["status.enum",{"_index":68,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["status.enum.ts",{"_index":295,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":346,"title":{},"body":{"index.html":{}}}],["string",{"_index":43,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"injectables/TasksService.html":{}}}],["successfully",{"_index":165,"title":{},"body":{"controllers/TasksController.html":{}}}],["support",{"_index":337,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":357,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":288,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":267,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":266,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":46,"title":{"classes/Task.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["task.description",{"_index":115,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.dto",{"_index":104,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":37,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:18",{"_index":50,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:27",{"_index":49,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":105,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.repository",{"_index":226,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.save",{"_index":122,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["task.status",{"_index":120,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["task.title",{"_index":114,"title":{},"body":{"classes/TaskRepository.html":{}}}],["taskmanagement",{"_index":373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskrepository",{"_index":85,"title":{"classes/TaskRepository.html":{}},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":57,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks.controller",{"_index":225,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":194,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":157,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":11,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":193,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":63,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.done",{"_index":71,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.in_progress",{"_index":70,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatus.open",{"_index":121,"title":{},"body":{"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["taskstatusvalidationpipe",{"_index":123,"title":{"classes/TaskStatusValidationPipe.html":{}},"body":{"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["test",{"_index":327,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":330,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":329,"title":{},"body":{"index.html":{}}}],["tests",{"_index":326,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":335,"title":{},"body":{"index.html":{}}}],["this.allowedstatuses.indexof(status",{"_index":154,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.createquerybuilder('task",{"_index":111,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.gettaskbyid(id",{"_index":251,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.isstatusvalid(value",{"_index":146,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.taskrepository.createtask(createtaskdto",{"_index":247,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete(id",{"_index":248,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone(id",{"_index":244,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.gettasks(filterdto",{"_index":242,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":212,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletetaskbyid(id",{"_index":216,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettaskbyid(id",{"_index":208,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettasks(filterdto",{"_index":205,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetaskstatus(id",{"_index":221,"title":{},"body":{"controllers/TasksController.html":{}}}],["throw",{"_index":147,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{}}}],["title",{"_index":41,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{}}}],["touch",{"_index":347,"title":{},"body":{"index.html":{}}}],["transform",{"_index":132,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transform(value",{"_index":138,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transformer",{"_index":277,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twitter",{"_index":353,"title":{},"body":{"index.html":{}}}],["type",{"_index":42,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":84,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":227,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":311,"title":{},"body":{"index.html":{}}}],["ui",{"_index":289,"title":{},"body":{"dependencies.html":{}}}],["unit",{"_index":325,"title":{},"body":{"index.html":{}}}],["updated",{"_index":218,"title":{},"body":{"controllers/TasksController.html":{}}}],["updated.'})@apiforbiddenresponse({description",{"_index":183,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetaskstatus",{"_index":163,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":181,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["usepipes",{"_index":191,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":210,"title":{},"body":{"controllers/TasksController.html":{}}}],["username",{"_index":370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validation.pipe",{"_index":196,"title":{},"body":{"controllers/TasksController.html":{}}}],["validation.pipe.ts",{"_index":125,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:12",{"_index":134,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:18",{"_index":141,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:33",{"_index":136,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validationpipe",{"_index":192,"title":{},"body":{"controllers/TasksController.html":{}}}],["validator",{"_index":54,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"dependencies.html":{}}}],["value",{"_index":133,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.touppercase",{"_index":145,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["variable",{"_index":257,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":362,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":320,"title":{},"body":{"index.html":{}}}],["website",{"_index":351,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":340,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { TasksModule } from './tasks/tasks.module';\n\n@Module({\n  imports: [TypeOrmModule.forRoot(typeOrmConfig), TasksModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, title: 'Task Description', description: 'The description of the task.', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/create-task.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, title: 'Task Title', description: 'The title of the task.', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/create-task.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    title: 'Task Title',\n    description: 'The title of the task.',\n    default: '',\n  })\n  title: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    title: 'Task Description',\n    description: 'The description of the task.',\n    default: '',\n  })\n  description: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksFilterDto.html":{"url":"classes/GetTasksFilterDto.html","title":"class - GetTasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/get-tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                search\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/get-tasks-filter.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/get-tasks-filter.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional } from 'class-validator';\nimport { TaskStatus } from '../task-status.enum';\n\nexport class GetTasksFilterDto {\n  @IsOptional()\n  @IsIn([TaskStatus.OPEN, TaskStatus.IN_PROGRESS, TaskStatus.DONE])\n  status: TaskStatus;\n\n  @IsOptional()\n  @IsNotEmpty()\n  search: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { TaskStatus } from './task-status.enum';\n\n@Entity()\nexport class Task extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  status: TaskStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/task.repository.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(filterDto: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/task.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { TaskStatus } from './task-status.enum';\nimport { Task } from './task.entity';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository {\n  async getTasks(filterDto: GetTasksFilterDto): Promise {\n    const { status, search } = filterDto;\n    const query = this.createQueryBuilder('task');\n    if (status) {\n      query.andWhere('task.status = :status', { status });\n    }\n\n    if (search) {\n      query.andWhere(\n        'task.title LIKE :search OR task.description LIKE :search',\n        { search: `%${search}%` },\n      );\n    }\n    const tasks = await query.getMany();\n    return tasks;\n  }\n\n  async createTask(createTaskDto: CreateTaskDto): Promise {\n    const { title, description } = createTaskDto;\n    const task = new Task();\n    task.title = title;\n    task.description = description;\n    task.status = TaskStatus.OPEN;\n    await task.save();\n    return task;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusValidationPipe.html":{"url":"classes/TaskStatusValidationPipe.html","title":"class - TaskStatusValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/pipes/task-status-validation.pipe.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            PipeTransform\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allowedStatuses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isStatusValid\n                            \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            allowedStatuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:12\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isStatusValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isStatusValid(status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  PipeTransform,\n} from '@nestjs/common';\nimport { TaskStatus } from '../task-status.enum';\n\n\nexport class TaskStatusValidationPipe implements PipeTransform {\n  readonly allowedStatuses = [\n    TaskStatus.OPEN,\n    TaskStatus.IN_PROGRESS,\n    TaskStatus.DONE,\n  ];\n\n  transform(value: any, metadata: ArgumentMetadata) {\n    console.log('value', value);\n    console.log('metadata', metadata);\n\n    value = value.toUpperCase();\n\n    if (!this.isStatusValid(value)) {\n      throw new BadRequestException(\n        'It is an invalid status, only OPEN, IN_PROGRESS, DONE is allowed',\n      );\n    }\n\n    return value;\n  }\n\n  private isStatusValid(status: any) {\n    const idx = this.allowedStatuses.indexOf(status);\n    return idx != -1;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTaskById\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({description: 'The tasks has been successfully created.'})@ApiForbiddenResponse({description: 'Forbidden'})@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOkResponse({description: 'The tasks has been successfully deleted.'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOkResponse({description: 'The task with a specific ID has been successfully retrieved.'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(filterDto: GetTasksFilterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'The tasks has been successfully retrieved.'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, status: TaskStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id/status')@ApiOkResponse({description: 'The tasks has been successfully updated.'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskStatusValidationPipe } from './pipes/task-status-validation.pipe';\nimport { Task } from './task.entity';\nimport { TaskStatus } from './task-status.enum';\nimport { ApiForbiddenResponse, ApiOkResponse, ApiTags } from '@nestjs/swagger';\n\n@ApiTags('Tasks')\n@Controller('tasks')\nexport class TasksController {\n  constructor(private tasksService: TasksService) {}\n\n  @Get()\n  @ApiOkResponse({ description: 'The tasks has been successfully retrieved.' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  getTasks(\n    @Query(ValidationPipe) filterDto: GetTasksFilterDto,\n  ): Promise {\n    return this.tasksService.getTasks(filterDto);\n  }\n\n  @Get('/:id')\n  @ApiOkResponse({\n    description: 'The task with a specific ID has been successfully retrieved.',\n  })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  getTaskById(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.tasksService.getTaskById(id);\n  }\n\n  @Post()\n  @ApiOkResponse({ description: 'The tasks has been successfully created.' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @UsePipes(ValidationPipe)\n  createTask(@Body() createTaskDto: CreateTaskDto): Promise {\n    return this.tasksService.createTask(createTaskDto);\n  }\n\n  @Delete('/:id')\n  @ApiOkResponse({ description: 'The tasks has been successfully deleted.' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  deleteTaskById(@Param('id', ParseIntPipe) id: number): Promise {\n    return this.tasksService.deleteTaskById(id);\n  }\n\n  @Patch('/:id/status')\n  @ApiOkResponse({ description: 'The tasks has been successfully updated.' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  updateTaskStatus(\n    @Param('id', ParseIntPipe) id: number,\n    @Body('status', TaskStatusValidationPipe) status: TaskStatus,\n  ): Promise {\n    return this.tasksService.updateTaskStatus(id, status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { TaskRepository } from './task.repository';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([TaskRepository])],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteTaskById\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(filterDto: GetTasksFilterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, status: TaskStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { Task } from './task.entity';\nimport { TaskRepository } from './task.repository';\nimport { TaskStatus } from './task-status.enum';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectRepository(TaskRepository)\n    private taskRepository: TaskRepository,\n  ) {}\n\n  async getTasks(filterDto: GetTasksFilterDto): Promise {\n    return this.taskRepository.getTasks(filterDto);\n  }\n\n  async getTaskById(id: number): Promise {\n    const found = await this.taskRepository.findOne(id);\n    if (!found) {\n      throw new NotFoundException(`Task ID is not present`);\n    }\n    return found;\n  }\n\n  async createTask(createTaskDto: CreateTaskDto): Promise {\n    return this.taskRepository.createTask(createTaskDto);\n  }\n\n  async deleteTaskById(id: number): Promise {\n    const result = await this.taskRepository.delete(id);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(`Task ID is not present`);\n    }\n  }\n\n  async updateTaskStatus(id: number, status: TaskStatus): Promise {\n    const task = await this.getTaskById(id);\n    task.status = status;\n    task.save();\n    return task;\n  }\n\n  // updateTaskStatus(id: string, status: TaskStatus): Task {\n  //   const task = this.getTaskById(id);\n  //   task.status = status;\n  //   return task;\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/dto/get-tasks-filter.dto.ts\n            \n            class\n            GetTasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/pipes/task-status-validation.pipe.ts\n            \n            class\n            TaskStatusValidationPipe\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tasks/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.11\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            pg : ^8.6.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.32\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tasks/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Aveek Roy\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'postgres',\n  password: 'postgres',\n  database: 'taskmanagement',\n  autoLoadEntities: true,\n  synchronize: true,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
